TODO File, place TODOs here

=== Rig goals ===
 - ✅ Bones
 - ✅ Rig
 - ✅ Vertex weights
 - ❌ Poses
 - ❌ Pose interpolation
 - ❌ Animations
 - ❌ Rig collision?

=== IK Solver ===
 - ❌ Implement an inverse kinematics solver
 - ❌ Ragdoll physics

=== Debugger goals ===
 - ✅ Increase the specificity of error messages while in debugger mode
 - ✅ Only check for errors in debug mode 
 - ❌ Make debug mode more granular

=== Framework goals ===
 - ✅ Develop an expandable schematic for entities and scenes.
 - ✅ Use JSON parser to read entities for the game engine.
 - ✅ Use JSON parser to read scenes for the game engine.
 - ✅ Parse rigidbody files as paths
 - ✅ Parse camera files as paths
 - ✅ Parse light files as paths
 - ❌ Normalize return values across all functions. 0 is bad and 1 is good maybe?
 - ✅ Improve granularity and specificity of the mesh system



=== JSON Parser goals === 

 NOTE: The JSON parser is now seperately maintained at https://github.com/Jacob-C-Smith/JSON,
       where you can find the source, static libraries, example code, and design commentary. 
       
=== Renderer goals ===
 - ✅ PBR model
 - ✅ Implement a key / value system to associate uniform names with scene information
 - ❌ Add support for tesselation control shaders and tesselation evaluation shaders
 - ❌ Handle multiple albedo images in one material?
 - ✅ Process lights out of a scene file
 - ❌ Dynamically assign lights
 - ❌ Phong lighting model
 - ❌ Implement a method that periodically changes lights based distance to the camera controller 
 - ❌ Dynamic reflections
 - ❌ Reflection probes
 - ❌ Tesselated height mapping 
 - ❌ Volumetric lighting
 - ❌ Decals
 - ❌ Clouds, smoke, fire, particles
 - ❌ Water
 
=== Physics goals ===
 - ✅ Summate and apply forces on an entity
 - ✅ Calculate acceleration, velocity, and position 
 - ❌ Summate and apply torque
 - ❌ Calculate angular acceleration, velocity, and rotation
 - ❌ Collision detection, box, sphere, cylinder, capsule, cone, and other simple shapes.
 - ✅ Implement BVH construction
 - ❌ Broad phase collision detection between leafs of bounding volumes
 - ❌ Implement GJK for convex hull collisions
 - ❌ Narrow phase collision detection
 - ❌ Collision resolution, force and torque feedback

=== Network goals ===
 - ✅ Network commands
 - ✅ in / out command queues
 - ❌ Respond to commands
 - ❌ Establish some security mechanisms?

=== Workflow goals ===
 - ❌ Finding/creating user interface library for engine tools
 - ❌ Brush implementation, a la primitive BSP geometry
 - ❌ Easy static mesh to scene pipeline
 - ❌ Editors/Tools 


=== General goals ===
 - ✅ Write broader initialization functions for G10. The function should initialize OpenGL, SDL2, and G10 according to an instance json file.
 - ❌ Implement multithreading (maybe use C++ to avoid Win32 API)
 - ✅ Export this whole project into a static library so that other developers can use it.
 - ❌ Export this whole project into a DLL file so that other developers can use it.
 - ✅ Binds
 - ✅ Callbacks
 - ❌ Refactor load_XYZ and load_XYZ_as_json with a load_XYZ_as_json_n function that takes a length. This will save many strlen calls
 
 Other TODOs can be found littered throughout the source code. Most are debug mode checks.
